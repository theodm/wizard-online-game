/* tslint:disable */
/* eslint-disable */
/**
 * Play with friends
 * Play with friends
 *
 * The version of the OpenAPI document: 1.0
 * Contact: theo.dm94@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateLobbyResponse,
    CreateLobbyResponseFromJSON,
    CreateLobbyResponseToJSON,
    RqUpdateConnectivity,
    RqUpdateConnectivityFromJSON,
    RqUpdateConnectivityToJSON,
    RqUpdatePlayerOrder,
    RqUpdatePlayerOrderFromJSON,
    RqUpdatePlayerOrderToJSON,
    RsException,
    RsExceptionFromJSON,
    RsExceptionToJSON,
    RsLobbySettings,
    RsLobbySettingsFromJSON,
    RsLobbySettingsToJSON,
    RsUser,
    RsUserFromJSON,
    RsUserToJSON,
    RsUserInfoResponse,
    RsUserInfoResponseFromJSON,
    RsUserInfoResponseToJSON,
    RsWizardCard,
    RsWizardCardFromJSON,
    RsWizardCardToJSON,
    TrumpColor,
    TrumpColorFromJSON,
    TrumpColorToJSON,
} from '../models';

export interface AddBotToLobbyRequest {
    lobbyID: string;
    authorization?: string;
    botType?: string;
}

export interface ChangeNameRequest {
    userName?: string;
    authorization?: string;
}

export interface CreateLobbyRequest {
    authorization?: string;
}

export interface CreateUserRequest {
    userName?: string;
}

export interface FinishRoundRequest {
    lobbyID: string;
    authorization?: string;
}

export interface GetApiUserSseWithUserprivatekeyRequest {
    userPrivateKey: string;
}

export interface GetLoggedInUserInformationRequest {
    authorization?: string;
}

export interface JoinLobbyRequest {
    authorization?: string;
    lobbyID?: string;
}

export interface LeaveLobbyRequest {
    lobbyID: string;
    authorization?: string;
}

export interface PlaceBetRequest {
    lobbyID: string;
    authorization?: string;
    bet?: number;
}

export interface PlayCardRequest {
    lobbyID: string;
    authorization?: string;
    rsWizardCard?: RsWizardCard;
}

export interface PlaySingleCardRequest {
    lobbyID: string;
    authorization?: string;
}

export interface SelectTrumpColorRequest {
    lobbyID: string;
    authorization?: string;
    trumpColor?: TrumpColor;
}

export interface StartGameRequest {
    lobbyID: string;
    authorization?: string;
}

export interface UpdateConnectivityRequest {
    lobbyID: string;
    authorization?: string;
    rqUpdateConnectivity?: RqUpdateConnectivity;
}

export interface UpdatePlayerOrderRequest {
    lobbyID: string;
    authorization?: string;
    rqUpdatePlayerOrder?: RqUpdatePlayerOrder;
}

export interface UpdateSettingsRequest {
    lobbyID: string;
    authorization?: string;
    rsLobbySettings?: RsLobbySettings;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Fügt einen Bot zur Lobby hinzu.
     * Post api lobby with lobbyid addbot
     */
    async addBotToLobbyRaw(requestParameters: AddBotToLobbyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lobbyID === null || requestParameters.lobbyID === undefined) {
            throw new runtime.RequiredError('lobbyID','Required parameter requestParameters.lobbyID was null or undefined when calling addBotToLobby.');
        }

        const queryParameters: any = {};

        if (requestParameters.botType !== undefined) {
            queryParameters['botType'] = requestParameters.botType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/lobby/{lobbyID}/addBot`.replace(`{${"lobbyID"}}`, encodeURIComponent(String(requestParameters.lobbyID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fügt einen Bot zur Lobby hinzu.
     * Post api lobby with lobbyid addbot
     */
    async addBotToLobby(requestParameters: AddBotToLobbyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.addBotToLobbyRaw(requestParameters, initOverrides);
    }

    /**
     * Ändert den Namen des akutell eingeloggten Benutzers.
     * Post api user changename
     */
    async changeNameRaw(requestParameters: ChangeNameRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.userName !== undefined) {
            queryParameters['userName'] = requestParameters.userName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/user/changeName`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Ändert den Namen des akutell eingeloggten Benutzers.
     * Post api user changename
     */
    async changeName(requestParameters: ChangeNameRequest, initOverrides?: RequestInit): Promise<void> {
        await this.changeNameRaw(requestParameters, initOverrides);
    }

    /**
     * Erstellt eine neue Lobby.
     * Post api lobby
     */
    async createLobbyRaw(requestParameters: CreateLobbyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateLobbyResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/lobby`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateLobbyResponseFromJSON(jsonValue));
    }

    /**
     * Erstellt eine neue Lobby.
     * Post api lobby
     */
    async createLobby(requestParameters: CreateLobbyRequest, initOverrides?: RequestInit): Promise<CreateLobbyResponse> {
        const response = await this.createLobbyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Erstellt einen neuen Benutzer.
     * Post api user createuser
     */
    async createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RsUser>> {
        const queryParameters: any = {};

        if (requestParameters.userName !== undefined) {
            queryParameters['userName'] = requestParameters.userName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/createUser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RsUserFromJSON(jsonValue));
    }

    /**
     * Erstellt einen neuen Benutzer.
     * Post api user createuser
     */
    async createUser(requestParameters: CreateUserRequest, initOverrides?: RequestInit): Promise<RsUser> {
        const response = await this.createUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Spieler beendet die Runde.
     * Post api lobby with lobbyid wizard finishround
     */
    async finishRoundRaw(requestParameters: FinishRoundRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lobbyID === null || requestParameters.lobbyID === undefined) {
            throw new runtime.RequiredError('lobbyID','Required parameter requestParameters.lobbyID was null or undefined when calling finishRound.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/lobby/{lobbyID}/wizard/finishRound`.replace(`{${"lobbyID"}}`, encodeURIComponent(String(requestParameters.lobbyID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Spieler beendet die Runde.
     * Post api lobby with lobbyid wizard finishround
     */
    async finishRound(requestParameters: FinishRoundRequest, initOverrides?: RequestInit): Promise<void> {
        await this.finishRoundRaw(requestParameters, initOverrides);
    }

    /**
     * Get api dummy
     */
    async getApiDummyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<RsUserInfoResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/dummy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RsUserInfoResponseFromJSON(jsonValue));
    }

    /**
     * Get api dummy
     */
    async getApiDummy(initOverrides?: RequestInit): Promise<RsUserInfoResponse> {
        const response = await this.getApiDummyRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get api lobby sse
     */
    async getApiLobbySseRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/lobby/sse`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get api lobby sse
     */
    async getApiLobbySse(initOverrides?: RequestInit): Promise<void> {
        await this.getApiLobbySseRaw(initOverrides);
    }

    /**
     * Get api user sse with userprivatekey
     */
    async getApiUserSseWithUserprivatekeyRaw(requestParameters: GetApiUserSseWithUserprivatekeyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userPrivateKey === null || requestParameters.userPrivateKey === undefined) {
            throw new runtime.RequiredError('userPrivateKey','Required parameter requestParameters.userPrivateKey was null or undefined when calling getApiUserSseWithUserprivatekey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/sse/{userPrivateKey}`.replace(`{${"userPrivateKey"}}`, encodeURIComponent(String(requestParameters.userPrivateKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get api user sse with userprivatekey
     */
    async getApiUserSseWithUserprivatekey(requestParameters: GetApiUserSseWithUserprivatekeyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.getApiUserSseWithUserprivatekeyRaw(requestParameters, initOverrides);
    }

    /**
     * Gibt an ob es für den übergebenen Session-Key eine gültige Session gibt.
     * Get api user
     */
    async getLoggedInUserInformationRaw(requestParameters: GetLoggedInUserInformationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RsUser>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RsUserFromJSON(jsonValue));
    }

    /**
     * Gibt an ob es für den übergebenen Session-Key eine gültige Session gibt.
     * Get api user
     */
    async getLoggedInUserInformation(requestParameters: GetLoggedInUserInformationRequest, initOverrides?: RequestInit): Promise<RsUser> {
        const response = await this.getLoggedInUserInformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Tritt einer Lobby bei...
     * Post api lobby joinlobby
     */
    async joinLobbyRaw(requestParameters: JoinLobbyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.lobbyID !== undefined) {
            queryParameters['lobbyID'] = requestParameters.lobbyID;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/lobby/joinLobby`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Tritt einer Lobby bei...
     * Post api lobby joinlobby
     */
    async joinLobby(requestParameters: JoinLobbyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.joinLobbyRaw(requestParameters, initOverrides);
    }

    /**
     * Die Lobby verlassen.
     * Post api lobby with lobbyid leavelobby
     */
    async leaveLobbyRaw(requestParameters: LeaveLobbyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lobbyID === null || requestParameters.lobbyID === undefined) {
            throw new runtime.RequiredError('lobbyID','Required parameter requestParameters.lobbyID was null or undefined when calling leaveLobby.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/lobby/{lobbyID}/leaveLobby`.replace(`{${"lobbyID"}}`, encodeURIComponent(String(requestParameters.lobbyID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Die Lobby verlassen.
     * Post api lobby with lobbyid leavelobby
     */
    async leaveLobby(requestParameters: LeaveLobbyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.leaveLobbyRaw(requestParameters, initOverrides);
    }

    /**
     * Spieler gibt seinen Tipp ab.
     * Post api lobby with lobbyid wizard placebet
     */
    async placeBetRaw(requestParameters: PlaceBetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lobbyID === null || requestParameters.lobbyID === undefined) {
            throw new runtime.RequiredError('lobbyID','Required parameter requestParameters.lobbyID was null or undefined when calling placeBet.');
        }

        const queryParameters: any = {};

        if (requestParameters.bet !== undefined) {
            queryParameters['bet'] = requestParameters.bet;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/lobby/{lobbyID}/wizard/placeBet`.replace(`{${"lobbyID"}}`, encodeURIComponent(String(requestParameters.lobbyID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Spieler gibt seinen Tipp ab.
     * Post api lobby with lobbyid wizard placebet
     */
    async placeBet(requestParameters: PlaceBetRequest, initOverrides?: RequestInit): Promise<void> {
        await this.placeBetRaw(requestParameters, initOverrides);
    }

    /**
     * Spielt eine Karte des Spielers.
     * Post api lobby with lobbyid wizard playcard
     */
    async playCardRaw(requestParameters: PlayCardRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lobbyID === null || requestParameters.lobbyID === undefined) {
            throw new runtime.RequiredError('lobbyID','Required parameter requestParameters.lobbyID was null or undefined when calling playCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/lobby/{lobbyID}/wizard/playCard`.replace(`{${"lobbyID"}}`, encodeURIComponent(String(requestParameters.lobbyID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RsWizardCardToJSON(requestParameters.rsWizardCard),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Spielt eine Karte des Spielers.
     * Post api lobby with lobbyid wizard playcard
     */
    async playCard(requestParameters: PlayCardRequest, initOverrides?: RequestInit): Promise<void> {
        await this.playCardRaw(requestParameters, initOverrides);
    }

    /**
     * Spielt die letzte Karte des Spielers.
     * Post api lobby with lobbyid wizard playsinglecard
     */
    async playSingleCardRaw(requestParameters: PlaySingleCardRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lobbyID === null || requestParameters.lobbyID === undefined) {
            throw new runtime.RequiredError('lobbyID','Required parameter requestParameters.lobbyID was null or undefined when calling playSingleCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/lobby/{lobbyID}/wizard/playSingleCard`.replace(`{${"lobbyID"}}`, encodeURIComponent(String(requestParameters.lobbyID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Spielt die letzte Karte des Spielers.
     * Post api lobby with lobbyid wizard playsinglecard
     */
    async playSingleCard(requestParameters: PlaySingleCardRequest, initOverrides?: RequestInit): Promise<void> {
        await this.playSingleCardRaw(requestParameters, initOverrides);
    }

    /**
     * Spieler wählt die Trumpffarbe aus.
     * Post api lobby with lobbyid wizard selecttrumpcolor
     */
    async selectTrumpColorRaw(requestParameters: SelectTrumpColorRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lobbyID === null || requestParameters.lobbyID === undefined) {
            throw new runtime.RequiredError('lobbyID','Required parameter requestParameters.lobbyID was null or undefined when calling selectTrumpColor.');
        }

        const queryParameters: any = {};

        if (requestParameters.trumpColor !== undefined) {
            queryParameters['trumpColor'] = requestParameters.trumpColor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/lobby/{lobbyID}/wizard/selectTrumpColor`.replace(`{${"lobbyID"}}`, encodeURIComponent(String(requestParameters.lobbyID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Spieler wählt die Trumpffarbe aus.
     * Post api lobby with lobbyid wizard selecttrumpcolor
     */
    async selectTrumpColor(requestParameters: SelectTrumpColorRequest, initOverrides?: RequestInit): Promise<void> {
        await this.selectTrumpColorRaw(requestParameters, initOverrides);
    }

    /**
     * Startet das Spiel.
     * Post api lobby with lobbyid startgame
     */
    async startGameRaw(requestParameters: StartGameRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lobbyID === null || requestParameters.lobbyID === undefined) {
            throw new runtime.RequiredError('lobbyID','Required parameter requestParameters.lobbyID was null or undefined when calling startGame.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/lobby/{lobbyID}/startGame`.replace(`{${"lobbyID"}}`, encodeURIComponent(String(requestParameters.lobbyID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Startet das Spiel.
     * Post api lobby with lobbyid startgame
     */
    async startGame(requestParameters: StartGameRequest, initOverrides?: RequestInit): Promise<void> {
        await this.startGameRaw(requestParameters, initOverrides);
    }

    /**
     * Aktualisiert den Status des aktuell eingeloggten Benutzers.
     * Post api lobby with lobbyid updateconnectivity
     */
    async updateConnectivityRaw(requestParameters: UpdateConnectivityRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lobbyID === null || requestParameters.lobbyID === undefined) {
            throw new runtime.RequiredError('lobbyID','Required parameter requestParameters.lobbyID was null or undefined when calling updateConnectivity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/lobby/{lobbyID}/updateConnectivity`.replace(`{${"lobbyID"}}`, encodeURIComponent(String(requestParameters.lobbyID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RqUpdateConnectivityToJSON(requestParameters.rqUpdateConnectivity),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Aktualisiert den Status des aktuell eingeloggten Benutzers.
     * Post api lobby with lobbyid updateconnectivity
     */
    async updateConnectivity(requestParameters: UpdateConnectivityRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateConnectivityRaw(requestParameters, initOverrides);
    }

    /**
     * Aktualisiert die Reihenfolge der Benutzer.
     * Post api lobby with lobbyid updateplayerorder
     */
    async updatePlayerOrderRaw(requestParameters: UpdatePlayerOrderRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lobbyID === null || requestParameters.lobbyID === undefined) {
            throw new runtime.RequiredError('lobbyID','Required parameter requestParameters.lobbyID was null or undefined when calling updatePlayerOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/lobby/{lobbyID}/updatePlayerOrder`.replace(`{${"lobbyID"}}`, encodeURIComponent(String(requestParameters.lobbyID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RqUpdatePlayerOrderToJSON(requestParameters.rqUpdatePlayerOrder),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Aktualisiert die Reihenfolge der Benutzer.
     * Post api lobby with lobbyid updateplayerorder
     */
    async updatePlayerOrder(requestParameters: UpdatePlayerOrderRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updatePlayerOrderRaw(requestParameters, initOverrides);
    }

    /**
     * Aktualisiert den Status des aktuell eingeloggten Benutzers.
     * Post api lobby with lobbyid updatesettings
     */
    async updateSettingsRaw(requestParameters: UpdateSettingsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lobbyID === null || requestParameters.lobbyID === undefined) {
            throw new runtime.RequiredError('lobbyID','Required parameter requestParameters.lobbyID was null or undefined when calling updateSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/lobby/{lobbyID}/updateSettings`.replace(`{${"lobbyID"}}`, encodeURIComponent(String(requestParameters.lobbyID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RsLobbySettingsToJSON(requestParameters.rsLobbySettings),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Aktualisiert den Status des aktuell eingeloggten Benutzers.
     * Post api lobby with lobbyid updatesettings
     */
    async updateSettings(requestParameters: UpdateSettingsRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateSettingsRaw(requestParameters, initOverrides);
    }

}
