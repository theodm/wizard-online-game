/* tslint:disable */
/* eslint-disable */
/**
 * Play with friends
 * Play with friends
 *
 * The version of the OpenAPI document: 1.0
 * Contact: theo.dm94@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    RsParticipant,
    RsParticipantFromJSON,
    RsParticipantFromJSONTyped,
    RsParticipantToJSON,
} from './RsParticipant';
import {
    RsStich,
    RsStichFromJSON,
    RsStichFromJSONTyped,
    RsStichToJSON,
} from './RsStich';

import {
     RsRoundStateForPlayerFirstRoundFromJSONTyped,
     RsRoundStateForPlayerNormalRoundFromJSONTyped
} from './';

/**
 * 
 * @export
 * @interface RsRoundStateForPlayer
 */
export interface RsRoundStateForPlayer {
    /**
     * 
     * @type {string}
     * @memberof RsRoundStateForPlayer
     */
    trumpColor?: RsRoundStateForPlayerTrumpColorEnum;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof RsRoundStateForPlayer
     */
    bets: { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof RsRoundStateForPlayer
     */
    sticheOfPlayer: { [key: string]: number; };
    /**
     * 
     * @type {RsParticipant}
     * @memberof RsRoundStateForPlayer
     */
    currentPlayer: RsParticipant;
    /**
     * 
     * @type {string}
     * @memberof RsRoundStateForPlayer
     */
    phase: RsRoundStateForPlayerPhaseEnum;
    /**
     * 
     * @type {RsStich}
     * @memberof RsRoundStateForPlayer
     */
    currentStich: RsStich;
    /**
     * 
     * @type {string}
     * @memberof RsRoundStateForPlayer
     */
    type: string;
}

/**
* @export
* @enum {string}
*/
export enum RsRoundStateForPlayerTrumpColorEnum {
    Red = 'Red',
    Yellow = 'Yellow',
    Green = 'Green',
    Blue = 'Blue',
    None = 'None'
}/**
* @export
* @enum {string}
*/
export enum RsRoundStateForPlayerPhaseEnum {
    SelectTrumpPhase = 'SelectTrumpPhase',
    BettingPhase = 'BettingPhase',
    PlayingPhase = 'PlayingPhase',
    RoundEnded = 'RoundEnded'
}

export function RsRoundStateForPlayerFromJSON(json: any): RsRoundStateForPlayer {
    return RsRoundStateForPlayerFromJSONTyped(json, false);
}

export function RsRoundStateForPlayerFromJSONTyped(json: any, ignoreDiscriminator: boolean): RsRoundStateForPlayer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['type'] === 'RsRoundStateForPlayerFirstRound') {
            return RsRoundStateForPlayerFirstRoundFromJSONTyped(json, true);
        }
        if (json['type'] === 'RsRoundStateForPlayerNormalRound') {
            return RsRoundStateForPlayerNormalRoundFromJSONTyped(json, true);
        }
    }
    return {
        
        'trumpColor': !exists(json, 'trumpColor') ? undefined : json['trumpColor'],
        'bets': json['bets'],
        'sticheOfPlayer': json['sticheOfPlayer'],
        'currentPlayer': RsParticipantFromJSON(json['currentPlayer']),
        'phase': json['phase'],
        'currentStich': RsStichFromJSON(json['currentStich']),
        'type': json['type'],
    };
}

export function RsRoundStateForPlayerToJSON(value?: RsRoundStateForPlayer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'trumpColor': value.trumpColor,
        'bets': value.bets,
        'sticheOfPlayer': value.sticheOfPlayer,
        'currentPlayer': RsParticipantToJSON(value.currentPlayer),
        'phase': value.phase,
        'currentStich': RsStichToJSON(value.currentStich),
        'type': value.type,
    };
}

